# 達人プログラマー - システム開発の職人から名匠への道
#   アンドリュー・ハント／デビッド・トーマス著
#   村上雅章訳
#   ピアソン・エデュケーション

[common]
head=
tail=- 達人プログラマー

[messages]
001 : 自らの技術に関心を持つこと / 技術に関心を持たずに、どうやってソフトウェアの開発ができるのか？
002 : あなたの仕事について考えること！ / 漫然と仕事するのではなく、意識して仕事する。また、常に批判的な目で自らの仕事を評価する。
003 : いい加減な言い訳よりも対策を用意すること / 言い訳ではなく対策を用意する。「できない」などと言わずにできることを明確にする
004 : 割れた窓を放置しておかないこと / まずい設計、誤った意思決定、貧弱なコードを見つけたら修正する
005 : 変化の触媒たれ / 他人に変革を強制することはできない。そうではなく、未来を垣間見せ、その実現に参加できるよう手助けする。
006 : 大きな構想を忘れないようにすること / 詳細に入り込みすぎて、周囲の状況をおろそかにしてしまわないようにする。
007 : 品質要求を明確にすること / プロジェクトにおける真の品質要求を決定するためには、ユーザーを巻き込む。
008 : 常にあなたの知識ポートフォリオに投資すること / 学習を習慣づける。
009 : 見聞きしたことを批判的な目で分析すること / ベンダーの売り文句、マスコミの宣伝、独断的考えに惑わされない。
010 : 伝える事柄と、伝える方法は車の両輪だと考えること / うまく伝えることができなければ、良いアイディアも無意味である。

011 : DRY-Dont Repeat Yourself / システム中のすべての知識は、重複なく、明瞭、信頼できる表現となっていなければならない。
012 : 再利用しやすいようにしておくこと / 容易に再利用できれば、皆がそれを使うはずである。再利用をサポートできる環境を構築する。
013 : 関係のないもの同士の影響を排除すること / 単純目的のうまく定義され、自己完結した独立コンポーネントを設計する。
014 : 最終決定などというものは存在しない / 石に刻み込まれるような決定はあり得ない。すべての決定を砂浜の砂に描かれたものと考え、変更に備えておく。
015 : 目標を見つけるには曳光弾を使うこと / 曳光弾を使えば、目標の補足と目標にどれだけ近く着弾したのかが判るようになる。
016 : プロトタイプの真の目的は学びにある / プロトタイピングとは、学習経験のことである。その価値はできあがったコードにあるのではなく、学習した教訓そのものなのである。
017 : 問題領域に近いところでプログラミングを行うこと / ユーザーの言葉で設計、コーディングを行う。
018 : あとでびっくりしないために、見積もりを行うこと / 始める前に見積もりを行い、前もって潜在的な問題を洗いだしておく。
019 : コーディングによってスケジュールを繰り返すこと / プロジェクトの期間見積もりに磨きを掛けるには、その実装によって得た経験を用いる。
020 : 知識はプレイン・テキストに保存すること / プレイン・テキストは、廃れることがなく、デバッグやテストを簡潔にする強力な武器となり得る。

021 : コマンド・シェルの力を使うこと / GUIが使えない場合はシェルを使う。
022 : 一つのエディターを熟知すること / エディターは手の延長となるべきであり、エディターが設定可能、拡張可能、プログラム可能であるかどうか、確認しておく。
023 : 常にソースコード管理を使用すること / ソースコード管理はあなたの仕事におけるタイムマシンであり、どんな過去にも戻ることができる。
024 : 非難するのではなく、問題を修復すること / バグの原因が誰にあるのかは問題ではない-問題はあなたのものであり、あなたが解決しなければならないのである。
025 : パニックに陥らないこと / まず深呼吸をしてから、バグを引き起こした原因について考える。
026 : "select"はおかしくない / OSやコンパイラ、サード・パーティーの製品やライブラリーにバグがあることは希である。バグはたいていの場合アプリケーション側に存在する。
027 : 仮定せずに、証明すること / 実際の環境-つまり実際のデータと境界条件を用いて仮定を証明する。
028 : テキスト操作言語を学ぶこと / 毎日多くの時間をテキスト作業に割いているのなら、そういった作業をコンピュータにさせるべきである。
029 : コードを生成するコードを作成すること / コード・ジェネレータは、生産性と二重化を避けるための武器である。
030 : あなたは完璧なソフトウェアを作ることができない / ソフトウェアは完璧にはならない。このため、不可避のエラーからコードとユーザーを守る。

031 : 契約を用いて設計を行うこと / ドキュメントには契約の考え方を用い、コードがそれ以上のこともそれ以下のことも行わないことを検証する。
032 : 早めにクラッシュさせること / 中途半端に動いているプログラムは、停止したプログラムよりもたちが悪い。
033 : もし起こり得ないというのであれば、表明を用いてそれを証明すること / 仮定を検証するには表明を使用する。表明を用いて不確かな世界からコードを守る。
034 : 例外は例外的な問題のみに使用すること / 例外の使い方を誤ると、従来からあるスパゲッティ・コードに起因するすべての可読性と保守性の問題が呼び込まれる。例外は例外的な場合にのみ用いる。
035 : 始めたことは終わらせること / リソースの解放は、可能な限りそのリソースを割り当てたルーチンやオブジェクトが責任を持って行うべきである。
036 : モジュール間の結合度を最小にすること / 「恥ずかしがりなコード」を記述し、デメテルの法則を適用することにより、結合度を低く抑える。
037 : 設定すべきものを統合しないこと / 何でも統合してしまうのではなく、設定オプションを用いて必要なものをアプリケーションが選択できるようにする。
038 : 抽象概念はコード上に、詳細はメタデータ上に置くこと / 概念的なものをプログラムし、詳細はコンパイルされたコード中には記述しない。
039 : 並列性の改善にはワークフローを分析すること / ユーザーのワークフローにある並列性を活用する。
040 : サービスを使って設計を行うこと / サービス（整合性のあるインタフェースをうまく定義した、独立・並列動作可能なオブジェクトを用いて設計を行う。

041 : 常に並列性を意識した設計を行うこと / 並列性を持たせることにより、仮定の少ないきれいなインタフェースを設計する。
042 : モデルからビューを分離すること / モデルとビューを用いてアプリケーションを設計することにより、安価で柔軟性の高い設計を目指す。
043 : ワークフローを協調させるためにはホワイトボードを使用すること / 独立性を保ったまま共通点のない事実やエージェントを協調させるには、ホワイトボードを使用する。
044 : 偶発的なプログラミングを行わないこと / 信頼のおけるもののみを信頼する。偶然の符号に注意し、当初の確固たる目的と偶然の一致を区別する。
045 : アルゴリズムのオーダーを見積もること / どのくらいかかるのか、コードを書き始めるまえに感じ取れるようにする。
046 : 見積もりの検証を行うこと / アルゴリズムの数学的分析で、すべてが判るわけではない。このため、対象としている環境で実際に測定する。
047 : 早めにリファクタリングすること、そしてこまめにリファクタリングすること / 庭の雑草取りや植物の再配置とを行うのと同じように、必要に応じてコードの再記述、再作業、再アーキテクトをおこなう。そして問題の根本原因を修正する。
048 : テスト設計を行うこと / コードの記述を始める前にテストのことを考え始める。
049 : ユーザーがテストする前にソフトウェアのテストを行うこと / 容赦ないテストを行う。ユーザーが先にバグを見つけることの無いようにする。
050 : 理解できないウィザードのコードを使わないこと / ウィザードを使えば大量のコードを生成できるが、そのすべてが理解できるまではプロジェクト中に組み入れない。

051 : 要求は拾い集めるものではなく、掘り起こすものである / 要求が見えるところに横たわっていることは希である。要求は、仮定、誤解、政略といった層に深く埋められているものである。
052 : ユーザーの視点に立つには、ユーザーと働くこと / システムの本当の使用方法について理解を得るにはこれが一番の方法である。
053 : 抽象は詳細よりも息が長いものである / 実装ではなく、抽象化に労力をつぎ込む。抽象は、異なった実装や新技術といったものに起因する集中砲火に耐えることができる。
054 : プロジェクトの用語集を作ること / プロジェクトが使用する特定の専門用語や語彙をまとめた用語集を作成、維持する。
055 : 枠にとらわれずに考えるのではなく、枠を見つけだすこと / 不可能と思える問題に直面した場合、実際の制約を見抜く。「この手段でやり遂げなければならないのか？」、「多少なりともの方法でやり遂げなければならないのか？」を自問する。
056 : 心の声に耳を傾け、準備ができてから開始すること / 長い人生で培ってきた経験を信じ、小さな疑いも無視しない。
057 : 解説しない方が良い場合もある / 仕様の渦の中に巻き込まれず、どこかのタイミングでコーディングを開始する。
058 : 形式的方法論の奴隷になってはいけない / 実際の開発における実用性や能力といった観点を抜きにして、方法論を盲信してしまうことは避ける。
059 : 高価なツールが良い設計を生み出すとは限らない / ベンダーの誇大広告、業界の偏見、価格の高さに惑わされず、メリットでツールを評価する。
060 : 職務権限ではなく、機能によってチームを編成すること / 設計者、コーディング担当、テスト担当を分断してしまわない。コードのビルドと同じ方法でチームを編成する。

061 : 手作業は危険である / シェル・スクリプトやバッチ・ファイルを使えば同じ作業を同じ順序で何度でも実行できる。
062 : 早目にテスト、何度もテスト、自動でテスト / 毎回ビルドを行う度に実行されるテストは、棚にしまわれているテスト計画よりもずっと有効なものとなる。
063 : テストがすべて終わるまでコーディングは終わらない / これ以上、言うことなし。
064 : テストのテストをするには破壊工作を試みる / テストがうまく機能するかどうかを確認するには、目的に応じたバグをソースのコピーに混入してみる。
065 : コードのカバレージではなく、状態のカバレージをテストすること / テストは、重要なプログラムの状態を識別して行う。すべての行をテストしただけでは十分ではない。
066 : 複数のバグを一度に見つけること / テスト担当者がバグを見つけた場合、今後はもうそれと同種のバグをテスト担当者が見つけることのないようにする。以降は自動化されたテストにチェックさせる。
067 : 日本語をもう一つのプログラミング言語として扱うこと / コーディングを行うようにドキュメントを記述する。DRY原則を守り、メタデータ、MVC、コードの自動生成といった技法を使用する。
068 : ドキュメントは付け足すものではなく、組み込むものである / コードと別に作られたドキュメントは、正確性に劣り、すぐに陳腐化する。
069 : ユーザーの期待をやや上回ること / ユーザーの期待を理解し、それよりも少し良いものを作る。
070 : あなたの作品に署名すること / 初期の職人が自らの成果物に誇りを持って署名したように、ソフトウェアに署名する。

